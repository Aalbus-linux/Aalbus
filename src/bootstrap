# this was originalluy meant as a script, but it would have been too long and complex.
# Read this more as a step-by-step instruction made from notes I made as I built this thing.
# good reading material: https://github.com/comfies/tldrlfs
# http://www.linuxfromscratch.org/lfs/view/stable/

# scripts for initial building of Aalbus from a regular Linux host
# This will build up to the point of a base system that can be chrooted
# The general order of things is similar to what you would read on LFS, but with other programs
# Aalbus is only built for x86_64. Other architectures may be targetted in the future if a community builds around this distro
# In that case, the most likely future will anyway be that those alternative architectures will be cross-compiled from within
# a x86_64 Aalbus system.

# You might have to add some directories in dest since git ignores empty directories.
mkdir -p ../dest/{bin,etc,lib,include,sbin,usr/{bin,sbin,include,lib,share,man,src},var,proc,sys,dev,run}

# note on / vs /usr : I take the traditional approach where things critical for booting and running are in / and extras in /usr
# for critical central components in /bin, I aim for static builds

# fetch and build ngtc depends on docker (builds on Alpine)
# ngtc is used as a convenient first step. When we chroot, we will rebuild the toolchain inside Aalbus
docker run tpimh/ngtc:latest /bin/sh -c 'git clone https://github.com/tpimh/ngtc && cd ngtc && root/sync.sh && root/configure.sh && root/build.sh && root/install.sh'
#identify <ID> of modified docker
docker ps -a
#save/commit docker image
docker commit <ID> ngtc-built
#after that one could run something like:
docker run -it -v"$PWD/..":/mnt --rm ngtc-built /bin/sh
#now you have /mnt/src and /mnt/dest and can start building.
#inside the docker image shell:
export PATH="/mnt/dest/bin:/x86_64-pc-linux-musl/bin:$PATH"
export LIBRARY_PATH="/mnt/dest/lib:/mnt/dest/usr/lib:/x86_64-pc-linux-musl/lib:$LIBRARY_PATH"
export CFLAGS="-I/mnt/dest/include -I/x86_64-pc-linux-musl/include $CFLAGS"
export LDFLAGS="-L/mnt/dest/lib -L/mnt/dest/usr/lib -L/x86_64-pc-linux-musl/lib $LDFLAGS"
export CC="clang"
export CXX="clang++"
export LD="lld"
export AR="llvm-ar"
export NM="llvm-nm"
export RANLIB="llvm-ranlib"

#to make it easy, I put these things in ntgc_env.sh so you can just start the docker image like this:
docker run -it -v"$PWD/..":/mnt --rm ngtc-built /bin/sh /mnt/src/ngtc_env.sh
#and start building...

# A faster alternative method: Download ngtc and root file system 
# from https://golovin.in/ and chroot a build environment.

# The order of the packages below follows the LFS instructions
## indicates that a package had to be built as a dependency for the package below

# install musl kernel headers
git clone https://github.com/Aalbus-linux/kernel-headers
cd kernel-headers
make ARCH=x86_64 prefix=/usr DESTDIR=../../dest install

# build musl libc
git clone https://github.com/Aalbus-linux/musl
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/musl
configure --prefix=/  --exec-prefix=/
make
make DESTDIR=/mnt/dest install
make clean
exit

## build llvm-crt-replacement
git clone https://github.com/Aalbus-linux/llvm-crt-replacement
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/llvm-crt-replacement
TARGET=x86_64 DEST=/mnt/dest/usr/lib ./build.sh

######## Stuff from Sabotage #########

## build gettext-tiny (for attr)
git clone https://github.com/Aalbus-linux/gettext-tiny
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/gettext-tiny
make LIBINTL=musl CFLAGS="$CFLAGS -fPIC"
make LIBINTL=musl DESTDIR=/mnt/dest prefix=/usr install

## build libnl-tiny
git clone https://github.com/Aalbus-linux/libnl-tiny
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libnl-tiny
make CC=clang CFLAGS="$CFLAGS -fPIC" prefix=/usr DESTDIR=/mnt/dest all install

## build gnu-getopt
git clone https://github.com/Aalbus-linux/gnu-getopt
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/gnu-getopt
make
make prefix=/usr DESTDIR=/mnt/dest install

######### End of stuff from Sabotage ####

## build libbsd : cheat (autogen on Arch)
git clone https://github.com/Aalbus-linux/libbsd
cd libbsd
./autogen.sh 
#TODO: make alternative configure independent on autotools
cd ..
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libbsd
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make CFLAGS="$CFLAGS -D__END_DECLS=/**/ -D__BEGIN_DECLS=/**/"
make DESTDIR=/mnt/dest install
# we need sys/cdefs.h and other compat headers sometimes
# https://git.alpinelinux.org/aports/plain/main/libc-dev/sgidefs.h
# https://git.alpinelinux.org/aports/plain/main/libc-dev/sys-cdefs.h
# https://git.alpinelinux.org/aports/plain/main/libc-dev/sys-queue.h
# https://git.alpinelinux.org/aports/plain/main/libc-dev/sys-tree.h

######### skarnet stuff ###############

## build skalibs
git clone https://github.com/Aalbus-linux/skalibs
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/skalibs
./configure --disable-shared --prefix=/usr
make DESTDIR=/mnt/dest install

## build nsss
git clone https://github.com/Aalbus-linux/nsss
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/nsss
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs  $LDFLAGS" install

## build utmps
git clone https://github.com/Aalbus-linux/utmps
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/utmps
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs  $LDFLAGS" install

## build mdevd
git clone https://github.com/Aalbus-linux/mdevd
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/mdevd
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs  $LDFLAGS" install

## build execline
git clone https://github.com/Aalbus-linux/execline
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/execline
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs  $LDFLAGS" install

## build s6
git clone https://github.com/Aalbus-linux/s6
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/s6
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs -L/mnt/dest/usr/lib/execline $LDFLAGS" install

## buold s6-linux-init
git clone https://github.com/Aalbus-linux/s6-linux-init
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/s6-linux-init
./configure --disable-shared --prefix=/ --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs -L/mnt/dest/usr/lib/execline -L/mnt/dest/usr/lib/nsss -L/mnt/dest/usr/lib/utmps -L/mnt/dest/usr/lib/s6 $LDFLAGS" install

## build s6-rc
git clone https://github.com/Aalbus-linux/s6-rc
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/s6-rc
./configure --disable-shared --prefix=/ --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs -L/mnt/dest/usr/lib/execline -L/mnt/dest/usr/lib/nsss -L/mnt/dest/usr/lib/utmps -L/mnt/dest/usr/lib/s6 $LDFLAGS" install

## build s6-dns
git clone https://github.com/Aalbus-linux/s6-dns
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/s6-dns
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs  $LDFLAGS" install

## buold s6-networking
git clone https://github.com/Aalbus-linux/s6-networking
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/s6-networking
./configure --disable-shared --prefix=/usr --with-sysdeps=/mnt/dest/usr/lib/skalibs/sysdeps
make DESTDIR=/mnt/dest LDFLAGS="-L/mnt/dest/usr/lib/skalibs -L/mnt/dest/usr/lib/s6 -L/mnt/dest/usr/lib/s6-dns $LDFLAGS" install


####### end of skarnet stuff ##########

## build attr
git clone https://github.com/Aalbus-linux/attr
cd attr
./autogen.sh 
#TODO: make alternative configure independent on autotools
cd ..
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/attr
./configure --disable-nls --disable-shared --prefix=/usr
make
make DESTDIR=/mnt/dest install

## build acl
git clone https://github.com/Aalbus-linux/acl
cd acl
./autogen.sh 
#TODO: make alternative configure independent on autotools
cd ..
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/acl
./configure --disable-nls --disable-shared --prefix=/usr
make
make DESTDIR=/mnt/dest install

## build perl5
git clone https://github.com/Aalbus-linux/perl5
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/perl5
./aalbus-config.sh
make
make DESTDIR=/mnt/dest install
cd /mnt/dest/usr/bin
ln -s perl5.33.6 perl

## build skey
git clone https://github.com/Aalbus-linux/skey
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/skey
./configure --prefix=/usr --sysconfdir=/etc --mandir=/usr/share/man --infodir=/usr/share/info
# TODO need to build perl first? fixpaths not found
# I installed the same version of Perl in the docker image before compiling to simplify paths.
make
make install

## build libcap-ng
git clone https://github.com/Aalbus-linux/libcap-ng
# ./autogen.sh on host
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libcap-ng
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make
make DESTDIR=/mnt/dest install

## build openpam
git clone https://github.com/Aalbus-linux/OpenPAM
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/OpenPAM
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make
make DESTDIR=/mnt/dest install

## build shadow
git clone https://github.com/Aalbus-linux/shadow
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/shadow
# add skarnet utmps
export CFLAGS="$CFLAGS -I/mnt/dest/usr/include/utmps -I/mnt/dest/usr/include/skalibs"
export LDFLAGS="$LDFLAGS -L/mnt/dest/usr/lib/utmps -lutmps -L/mnt/dest/usr/lib/skalibs -lskarnet"
./configure --prefix=/usr --sysconfdir=/etc --enable-utmpx --disable-nls --with-libpam --with-acl --with-attr --with-skey
make

## build bc
git clone https://github.com/Aalbus-linux/bc
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/bc
./configure --prefix=/usr
make
make DESTDIR=/mnt/dest install

# build netbsd-curses
git clone https://github.com/Aalbus-linux/netbsd-curses
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/netbsd-curses
make CFLAGS="$CFLAGS -fPIC" PREFIX=/usr DESTDIR=/mnt/dest all install

## build S-Lang
git clone https://github.com/Aalbus-linux/S-Lang
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/S-Lang
./configure --prefix=/usr
make DESTDIR=/mnt/dest install

## build libedit
git clone https://github.com/Aalbus-linux/libedit
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libedit
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make CFLAGS="-D__STDC_ISO_10646__=201103L $CFLAGS"
make DESTDIR=/mnt/dest install
cd /mnt/dest/usr/include
ln -s editline/readline.h readline.h
ln -s editline/readline.h history.h
cd /mnt/dest/usr/lib
ln -s libedit.a 

## build most-pager
git clone https://github.com/Aalbus-linux/most-pager
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/most-pager
./configure --prefix=/usr --sysconfdir=/etc --with-slang=/mnt/dest/usr
make
make DESTDIR=/mnt/dest install

# build mksh
git clone https://github.com/Aalbus-linux/mksh
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/mksh
chmod +x Build.sh
CFLAGS="-static $CFLAGS" ./Build.sh -r
install -c -s -o root -g bin -m 555 mksh /mnt/dest/bin/mksh
echo /bin/mksh >>/mnt/dest/etc/shells
install -D -m 644 dot.mkshrc "/mnt/dest/etc/skel/.mkshrc"
cd /mnt/dest/bin
ln -s mksh sh

# build core utilities : ubase
git clone https://github.com/Aalbus-linux/ubase
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/ubase
#(custom config.mk commited in repo)
make CFLAGS="-static $CFLAGS"
make DESTDIR=/mnt/dest install

## build bmake
## at this stage, keep bmake as bmake and only rename to make at the end
git clone https://github.com/Aalbus-linux/bmake
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/bmake
./boot-strap --prefix=/usr op=build
#edit install-sh and add #!/bin/sh
./boot-strap --install-destdir=/mnt/dest --prefix=/usr op=install

# build libbz2
git clone https://github.com/Aalbus-linux/bzip2
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/bzip2
make CC=clang CFLAGS=$CFLAGS 
make PREFIX=/mnt/dest/usr install

# build libb2
git clone https://github.com/Aalbus-linux/libb2
# autogen.sh
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libb2
./configure --prefix=/usr --sysconfdir=/etc
make
make DESTDIR=/mnt/dest install

# build lz4
git clone https://github.com/Aalbus-linux/lz4
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/lz4
make -C lib PREFIX=/usr
make -C programs PREFIX=/usr lz4 lz4c
make install PREFIX=/usr DESTDIR=/mnt/dest

# build xz
git clone https://github.com/Aalbus-linux/xz
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/xz
./configure --prefix=/usr --sysconfdir=/etc --disable-nls --disable-shared
make
make DESTDIR=/mnt/dest install

# build zstd
git clone https://github.com/Aalbus-linux/zstd
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/zstd
make
make -C contrib/pzstd
make PREFIX=/usr DESTDIR=/mnt/dest install

# build libexpat
git clone https://github.com/Aalbus-linux/libexpat
# libtoolize autoreconf on host : issues, do release tarball instead
# https://github.com/libexpat/libexpat/releases/download/R_2_2_10/expat-2.2.10.tar.bz2
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libexpat/expat
#delete CXXCPP sanity check
./configure --prefix=/usr CPPFLAGS=-DXML_LARGE_SIZE --disable-shared
make
make DESTDIR=/mnt/dest install

# build libxml2
git clone https://github.com/Aalbus-linux/libxml2
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libxml2
./configure --prefix=/usr --sysconfdir=/etc --disable-shared --without-python
make
make DESTDIR=/mnt/dest install

#build lzo2
git clone https://github.com/Aalbus-linux/lzo2
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/lzo2
./configure --prefix=/usr --sysconfdir=/etc
make
make DESTDIR=/mnt/dest install

#build tre
#annoying autoconf/automake stuff
# use http://laurikari.net/tre/tre-0.8.0.tar.bz2
./configure --prefix=/usr --sysconfdir=/etc
make
make DESTDIR=/mnt/dest install

## build openssl. needs perl: apk add perl in docker image the one built above failed.
git clone https://github.com/Aalbus-linux/openssl
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/openssl
./Configure --prefix=/usr --openssldir=/etc/ssl --libdir=lib
make
make DESTDIR=/mnt/dest install

# build libarchive
git clone https://github.com/Aalbus-linux/libarchive
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libarchive
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
make DESTDIR=/mnt/dest install
cd /mnt/dest/usr/bin
ln -s bsdtar tar
ln -s bsdcpio cpio

## build libelf from elftoolchain
git clone https://github.com/Aalbus-linux/elftoolchain
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/elftoolchain/libelf
# had to edit /mnt/dest/usr/share/mk/bsd.lib.mk to fix -soname
bmake -m /mnt/dest/usr/share/mk CFLAGS="-I. -I../common $CFLAGS" CC=clang
bmake -m /mnt/dest/usr/share/mk DESTDIR=/mnt/dest install

## build neatroff
git clone https://github.com/Aalbus-linux/neatroff
git clone https://github.com/Aalbus-linux/neatroff_make
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/neatroff
make
install -Dm755 roff /mnt/dest/usr/bin/neatroff
install -Dm644 ../neatroff_make/man/neatroff.1 /mnt/dest/usr/share/man/man1/
mkdir -p /mnt/dest/usr/share/neatroff/tmac
mkdir -p /mnt/dest/usr/share/neatroff/font
cp -r ../neatroff_make/tmac/* /mnt/dest/usr/share/neatroff/tmac/
cd /mnt/dest/usr/bin
ln -s neatroff roff
lm -s neatroff troff
#neatroff does not provide nroff compatibility, use Heirloom doctools
git clone https://github.com/Aalbus-linux/heirloom-doctools
cd /mnt/src/heirloom-doctools
make
cp troff/nroff.d/nroff /mnt/dest/usr/bin/
cp troff/nroff.d/nroff.1 /mnt/dest/usr/share/man/man1/
mkdir -p /mnt/dest/usr/share/doctools/nterm
cp -r troff/nroff.d/terms.d/* /mnt/dest/usr/share/doctools/nterm/

#build mandoc
#fix configure
./configure
make
make DESTDIR=/mnt/dest install

## build bmkdep
git clone https://github.com/Aalbus-linux/bmkdep
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/bmkdep
bmake -m /mnt/dest/usr/share/mk PREFIX=/usr CC=clang CFLAGS=$CFLAGS
bmake -m /mnt/dest/usr/share/mk PREFIX=/usr DESTDIR=/mnt/dest install

## build mk-configure
git clone https://github.com/Aalbus-linux/mk-configure
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/mk-configure
export PREFIX=/usr SYSCONFDIR=/etc MANDIR=/usr/share/man
bmake -m /mnt/dest/usr/share/mk CUSTOM.prog_nbmkdep=/usr/bin/bmkdep all
bmake -m /mnt/dest/usr/share/mk CUSTOM.prog_nbmkdep=/usr/bin/bmkdep DESTDIR=/mnt/dest install

## build musl-fts
git clone https://github.com/Aalbus-linux/musl-fts
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/musl-fts
./build.sh

## build libglob
git clone https://github.com/Aalbus-linux/libglob
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/libglob
make PREFIX=/usr DESTDIR=/mnt/dest install

# build temporary core utilities : sbase
# nbase difficult to build using custom include paths for bmake mk files
git clone https://github.com/Aalbus-linux/sbase
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/sbase
make CFLAGS="-static $CFLAGS" LDFLAGS="$LDFLAGS"
make DESTDIR=/mnt/dest install

## dependency in nbase : tzfile.h
## https://data.iana.org/time-zones/releases/tzcode2020f.tar.gz
## https://data.iana.org/time-zones/releases/tzdata2020f.tar.gz
## make CC=clang CFLAGS=$CFLAGS
## make DESTDIR=/mnt/dest install
## cp tzfile.h /mnt/dest/usr/include/

# build core utilities : nbase
# mkcmake too annoying to use while building from a different root.
# copy mk-configure files to the correct /usr directories in the docker image and do mkc_compiler_settings
# a problem with lex : apk add flex
# then continue...
git clone https://github.com/Aalbus-linux/nbase
cd nbase
PREFIX=/ SYSCONFDIR=/etc MANDIR=/usr/share/man  CFLAGS="-static -Wno-error $CFLAGS -DTM_YEAR_BASE=1900" LDFLAGS="-static $LDFLAGS -lfts -Wl,-Bstatic -lterminfo" MAKESYSPATH="/mnt/dest/usr/share/mk" LEX=flex mkcmake all
PREFIX=/ DESTDIR=/mnt/dest SYSCONFDIR=/etc MANDIR=/usr/share/man mkcmake install

#in chroot
PREFIX=/ SYSCONFDIR=/etc MANDIR=/usr/share/man  MAN=man CFLAGS="-static -Wno-error $CFLAGS -DTM_YEAR_BASE=1900 -Dstrtoq=strtoll" LDFLAGS="-static $LDFLAGS -lfts -Wl,-Bstatic -lterminfo -" LEX=flex mkcmake all

#### diffutils replacement?

## build slibtool
git clone https://github.com/Aalbus-linux/slibtool
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/slibtool
./configure --prefix=/usr --sysconfdir=/etc --datadir=/usr/share
make DESTDIR=/mnt/dest install
cd /mnt/dest/usr/bin
ln -s slibtool libtool

## build pkgconf
git clone https://github.com/Aalbus-linux/pkgconf
# on host: ./autogen.sh
# fix symlinks with sed -i
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/pkgconf
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make
make DESTDIR=/mnt/dest install

# build file(1)
git clone https://github.com/Aalbus-linux/file
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/file
# aclocal/autoconf/automake --add-missing / libtoolize
# fix symlinks with sed -i
./configure --prefix=/usr --sysconfdir=/etc
make LIBTOOL=slibtool
make LIBTOOL=slibtool DESTDIR=/mnt/dest install

#### findutils replacement?
# find provided by nbase

## build byacc
git clone https://github.com/Aalbus-linux/byacc-snapshots
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/byacc-snapshots
./configure --prefix=/usr --sysconfdir=/etc
make DESTDIR=/mnt/dest install
#fake bison
cd /mnt/dest/usr/bin
ln -s yacc bison

## build lex
git clone https://github.com/Aalbus-linux/lex
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/lex
make PREFIX=/usr DESTDIR=/mnt/dest install

# build awk
git clone https://github.com/Aalbus-linux/awk
# cheated, ran bison -d awkgram.y
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/awk
make CC=clang HOSTCC=clang CFLAGS=$CFLAGS
cp a.out /mnt/dest/usr/bin/awk
cp awk.1 /mnt/dest/usr/share/man/man1/

#build pcre2
git clone https://github.com/Aalbus-linux/pcre2
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/pcre2
./configure --prefix=/usr --sysconfdir=/etc --disable-shared
make
make DESTDIR=/mnt/dest install

# build ugrep
git clone https://github.com/Aalbus-linux/ugrep
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/ugrep

## build zlib-ng
git clone https://github.com/Aalbus-linux/zlib-ng
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/zlib-ng
# edit configure to #!/bin/sh
./configure --prefix=/usr --libdir=/usr/lib --zlib-compat
make
make DESTDIR=/mnt/dest install

# build pigz
git clone https://github.com/Aalbus-linux/pigz
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/pigz
cp /mnt/dest/usr/include/zlib.h .
cp /mnt/dest/usr/include/zconf.h .
make CC=clang CFLAGS=$CFLAGS
install -Dm755 pigz /mnt/dest/usr/bin/pigz
install -Dm755 pigz.1 /mnt/dest/usr/share/man/man1/pigz.1
cd /mnt/dest/usr/bin
ln -s pigz unpigz
ln -s pigz gzip
ln -s pigz gunzip

## build samurai
git clone https://github.com/Aalbus-linux/samurai
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/samurai
make PREFIX=/usr DESTDIR=/mnt/dest install

# build kati
git clone https://github.com/Aalbus-linux/kati
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/kati
make CXX=clang++ KATI_CXXFLAGS="-g -W -Wall -MMD -MP -O -DNOLOG $CFLAGS" ckati
# lots of header issues with math.h and stddef max_align_t. Edited headers.
# managed to build in chroot with llvm 12.
# Had to edit Makefile.ckati to include -lunwind for linking.


# bui;d ibtermkey
make CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS -lcurses -lterminfo" PREFIX=/usr LIBTOOL=slibtool pkgconfig=pkgconf

# build libexecinfo
make DESTDIR=/mnt/dest install

#build lua
make CFLAGS=$CFLAGS
make DESTDIR=/mnt/dest install
cp liblua.a /mnt/dest/usr/lib/
cp lua /mnt/dest/usr/bin/
cp lua.h /mnt/dest/usr/include/
cp lauxlib.h /mnt/dest/usr/include/
cp luaconf.h /mnt/dest/usr/include/
cp lualib.h /mnt/dest/usr/include/

# build lpeg
# copy lua headers to lpeg directory
make CC=clang CFLAGS="-fPIC $CFLAGS"

# build vis
# manually edit config.mk
make
cp vis /mnt/dest/usr/bin/vi

#### Patch?

# Python a build dependency of llvm
# https://www.python.org/ftp/python/3.9.1/Python-3.9.1.tar.xz
./configure --prefix=/usr --sysconfdir=/etc --enable-optimizations --disable-rpath --with-computed-gotos --with-system-expat --with-threads --without-ensurepip
make EXTRA_CFLAGS="$CFLAGS -DTHREAD_STACK_SIZE=0x100000" ax_cv_c_float_words_bigendian=no LDFLAGS="-static $LDFLAGS"
make EXTRA_CFLAGS="$CFLAGS -DTHREAD_STACK_SIZE=0x100000" ax_cv_c_float_words_bigendian=no LDFLAGS="-static $LDFLAGS" DESTDIR=/mnt/dest install

#libffi
./configure CXXCPP="clang++ -E" --prefix=/usr --sysconfdir=/etc --disable-docs --disable-shared --disable-multi-os-directory

#googletest
cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr
sed -i 's/-Werror //g'
samu
DESTDIR=/mnt/dest samu install

# build llvm/clang toolchain for the Aalbus chroot (stage 2)
# added ngtc patches, except for linking with libgcc, we want to get rid of it...
git clone https://github.com/Aalbus-linux/llvm-project
# <enter docker environment with ngtc_env.sh>
cd /mnt/src/llvm-project
#adjust PATH and apk add python3 and perl
./aalbus-config-llvm.sh
#hack headers for stupid include conflicts cmath. math.h ...stddef
#remove -pedantic from build.ninja with sed -i
samu
# libc++ failed to compile due to missing divti3, udivti3 and udivmodti4. Statically linked in those objects from compiler-rt/lib/builtins/
# by editing build.ninja


===>>
Keep on building in chroot

I have made /include symlinked to /usr/include
/usr/etc symlinked to /etc and /usr/man symlinked to /usr/share/man

#you can use the Aalbus-chroot script for convenience

#in chroot (copied and modified from LFS for convenience):
mkdir -p /etc/{opt,sysconfig}
mkdir -p /lib/firmware
mkdir -p /media/{floppy,cdrom}
mkdir -p /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -p /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -p /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -p /usr/{,local/}share/man/man{1..8}
mkdir -p /var/{cache,local,log,mail,opt,spool}
mkdir -p /var/lib/{color,misc,locate}

ln -sfv /run /var/run
ln -sfv /run/lock /var/lock

install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp

ln -sv /proc/self/mounts /etc/mtab

#### gettext-tiny already built

#### Texinfo?

#### util-linux replaced by ubase

#build git
gmake NO_REGEX=NeedsStartEnd AR=llvm-ar prefix='/usr' gitexecdir='/usr/lib/git-core' CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" USE_LIBPCRE2=1 NO_PERL_CPAN_FALLBACKS=1 all 

# cmake
# cmake bootstrap failed, so I first compiled using the new llvm 12 compiler but with cmake from within the Alpine docker image 
Built cmake with cmake from docker image, then it was self-hosting.

## neovim
## vis crashed and got core dumps. vis also had a namespace conflict with a utility in nbase
# as backup, the standard nvi has been built/installed
# switch to neovim.
# dependencies that had to be built: msgpack-c, libuv, libluv, unibilium, libvterm, (lpeg), libmpack, lua-mpack, bitlib
#bitlib not supported by lua 5.4. bit should be included. Add Arch linux .so patch to lua and rebuild. Symlink liblua.so to bit.so
lua:
make MYCFLAGS="$CFLAGS -fPIC" MYLDFLAGS="$LDFLAGS -lterminfo" CC=clang INSTALL_TOP=/usr INSTALL_MAN=/usr/share/man/man1 linux-readline
luv
cmake -GNinja -DWITH_SHARED_LIBUV=ON -DLUA_BUILD_TYPE=System -DBUILD_MODULE=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr -DWITH_LUA_ENGINE=Lua .
msgpack
cmake -DMSGPACK_CXX[11|17]=ON -DCMAKE_INSTALL_PREFIX=/usr .
neovim:
cmake -Hneovim-0.4.4 -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DPREFER_LUA=ON -DLUA_INCLUDE_DIR=/usr/include -DLUA_CPATH=/usr/lib/lua/5.4 .
# ... and lua 5.1 needed... give up here and go for regular vim.

./configure --prefix=/usr --sysconfdir=/etc --with-lua-prefix=/usr --with-compiledby="Aalbus Linux" --disable-gui
